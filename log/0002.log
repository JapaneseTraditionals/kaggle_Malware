[INFO] 2019-01-13 00:52:52,877 >>	[START]  Processor.preprocess()
[INFO] 2019-01-13 00:52:52,878 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-01-13 00:52:52,887 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-01-13 00:52:52,888 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-01-13 00:52:52,893 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-01-13 00:52:52,894 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-01-13 00:52:52,900 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-01-13 00:52:52,901 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-01-13 00:52:52,906 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-01-13 00:52:52,907 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-01-13 00:52:52,913 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-01-13 00:52:52,913 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-01-13 00:52:52,919 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-01-13 00:52:52,920 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-01-13 00:52:52,926 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-01-13 00:52:52,926 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-01-13 00:52:52,932 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-01-13 00:52:52,932 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-01-13 00:52:52,938 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-01-13 00:52:52,938 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-01-13 00:52:52,944 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-01-13 00:52:52,944 >>	[FINISH] Processor.preprocess(): [elapsed_time] >> 00:00:00
[INFO] 2019-01-13 00:52:52,945 >>	[START]  Processor.train()
[INFO] 2019-01-13 00:52:52,945 >>	[START]  MocoClassifier.fit()
[ERROR] 2019-01-13 00:52:52,945 >>	Unexpected Exception Occurred.
Traceback (most recent call last):
  File "src/main.py", line 20, in <module>
    main(get_option())
  File "src/main.py", line 12, in main
    ProcessorFactory.process(args)
  File "/Users/berry/Kaggle/malware/src/processor_factory.py", line 32, in process
    validity, predict = processor.process()
  File "/Users/berry/Kaggle/malware/src/processor.py", line 31, in process
    validity = self.__train(feature_names)
  File "/Users/berry/Kaggle/malware/src/save_log.py", line 83, in wrapper
    result = func(*args, **kargs)
  File "/Users/berry/Kaggle/malware/src/processor.py", line 61, in __train
    self.classifier.fit(feature_names)
  File "/Users/berry/Kaggle/malware/src/save_log.py", line 83, in wrapper
    result = func(*args, **kargs)
  File "/Users/berry/Kaggle/malware/src/moco_classifier.py", line 22, in fit
    clfs = self.__fit_as_classifier_type(train_df)
  File "/Users/berry/Kaggle/malware/src/moco_classifier.py", line 36, in __fit_as_classifier_type
    return self.__fit_with_lgbm(df)
  File "/Users/berry/Kaggle/malware/src/moco_classifier.py", line 42, in __fit_with_lgbm
    assert False
AssertionError
