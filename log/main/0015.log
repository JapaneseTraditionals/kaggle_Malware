[INFO] 2019-02-16 23:08:38,503 >>	Classifier Type: PYTORCH
[INFO] 2019-02-16 23:08:38,504 >>	Input Path: /home/berry/Malware/data/subset/lgbm_adv
[INFO] 2019-02-16 23:08:38,504 >>	--------------------------------
[INFO] 2019-02-16 23:08:38,505 >>	[START]  Processor.preprocess()
[INFO] 2019-02-16 23:08:38,507 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 23:08:38,532 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 23:08:38,534 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 23:08:38,543 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 23:08:38,545 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 23:08:38,554 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 23:08:38,555 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 23:08:38,564 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 23:08:38,565 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 23:08:38,574 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 23:08:38,575 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 23:08:38,584 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 23:08:38,585 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 23:08:38,594 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 23:08:38,595 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 23:08:38,604 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 23:08:38,605 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 23:08:38,614 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 23:08:38,615 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 23:08:38,624 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 23:08:38,625 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 23:08:38,634 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 23:08:38,636 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 23:08:38,644 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 23:08:38,645 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 23:08:38,654 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 23:08:38,655 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 23:08:38,664 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 23:08:38,665 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 23:08:38,674 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 23:08:38,675 >>	[FINISH] Processor.preprocess(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 23:08:38,676 >>	[START]  Processor.train()
[INFO] 2019-02-16 23:08:38,677 >>	[START]  PyTorchClassifier.train()
[INFO] 2019-02-16 23:08:38,680 >>		 >> 0 folds start
[INFO] 2019-02-16 23:08:38,681 >>		 	 Generating datasets...
[INFO] 2019-02-16 23:08:38,683 >>		 	 	 Reading train_Kernel02.csv...
[INFO] 2019-02-16 23:08:43,630 >>		 	 	 Reading train_Kernel01.csv...
[INFO] 2019-02-16 23:09:11,696 >>		 	 	 Reading train_Display.csv...
[INFO] 2019-02-16 23:09:29,512 >>		 	 	 Reading train_OneHotEncoding.csv...
[INFO] 2019-02-16 23:09:48,463 >>		 	 	 Reading train_Os.csv...
[INFO] 2019-02-16 23:10:08,916 >>		 	 	 Reading train_Binary.csv...
[INFO] 2019-02-16 23:10:30,703 >>		 	 	 Reading train_Numerical.csv...
[INFO] 2019-02-16 23:10:52,526 >>		 	 	 Reading train_Categorical.csv...
[INFO] 2019-02-16 23:12:21,737 >>		 	 	 Reading validate_Kernel02.csv...
[INFO] 2019-02-16 23:12:23,191 >>		 	 	 Reading validate_Kernel01.csv...
[INFO] 2019-02-16 23:12:29,358 >>		 	 	 Reading validate_Display.csv...
[INFO] 2019-02-16 23:12:33,533 >>		 	 	 Reading validate_OneHotEncoding.csv...
[INFO] 2019-02-16 23:12:37,759 >>		 	 	 Reading validate_Os.csv...
[INFO] 2019-02-16 23:12:42,451 >>		 	 	 Reading validate_Binary.csv...
[INFO] 2019-02-16 23:12:47,223 >>		 	 	 Reading validate_Numerical.csv...
[INFO] 2019-02-16 23:12:51,914 >>		 	 	 Reading validate_Categorical.csv...
[INFO] 2019-02-16 23:26:20,844 >>		 	 Datasets were generated.
[ERROR] 2019-02-16 23:36:29,477 >>	Unexpected Exception Occurred.
Traceback (most recent call last):
  File "src/main.py", line 23, in <module>
    main(get_option())
  File "src/main.py", line 14, in main
    ProcessorFactory.process(args)
  File "/home/berry/Malware/src/processor_factory.py", line 39, in process
    validity, predict = processor.process()
  File "/home/berry/Malware/src/processor.py", line 42, in process
    validity = None if only_prediction() and model_exist() else self.__train(feature_names)
  File "/home/berry/Malware/src/save_log.py", line 112, in wrapper
    result = func(*args, **kargs)
  File "/home/berry/Malware/src/processor.py", line 69, in __train
    return self.classifier.train(feature_names)
  File "/home/berry/Malware/src/save_log.py", line 112, in wrapper
    result = func(*args, **kargs)
  File "/home/berry/Malware/src/classifier/pytorch_classifier.py", line 94, in train
    verbose=self.params["verbose"])
  File "/home/berry/Malware/src/classifier/torch_util.py", line 74, in train_model
    outputs = model(inputs)
  File "/home/berry/.pyenv/versions/3.6.6/lib/python3.6/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/home/berry/Malware/src/classifier/pytorch_network/SimpleNet.py", line 19, in forward
    x = self.bn1(x)
  File "/home/berry/.pyenv/versions/3.6.6/lib/python3.6/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/home/berry/.pyenv/versions/3.6.6/lib/python3.6/site-packages/torch/nn/modules/batchnorm.py", line 76, in forward
    exponential_average_factor, self.eps)
  File "/home/berry/.pyenv/versions/3.6.6/lib/python3.6/site-packages/torch/nn/functional.py", line 1619, in batch_norm
    raise ValueError('Expected more than 1 value per channel when training, got input size {}'.format(size))
ValueError: Expected more than 1 value per channel when training, got input size torch.Size([1, 100])
