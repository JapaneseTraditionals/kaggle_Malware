[INFO] 2019-02-16 16:23:36,378 >>	Classifier Type: PYTORCH
[INFO] 2019-02-16 16:23:36,724 >>	Input Path: /home/berry/Malware/data/subset/lgbm_adv
[INFO] 2019-02-16 16:23:37,050 >>	--------------------------------
[INFO] 2019-02-16 16:23:37,370 >>	[START]  Processor.preprocess()
[INFO] 2019-02-16 16:23:37,708 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 16:23:38,065 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 16:23:38,395 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 16:23:38,727 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 16:23:39,048 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 16:23:39,386 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 16:23:39,712 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 16:23:40,056 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 16:23:40,384 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 16:23:40,730 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 16:23:41,058 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 16:23:41,393 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 16:23:41,729 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 16:23:42,060 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 16:23:42,400 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 16:23:42,730 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 16:23:43,049 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 16:23:43,387 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 16:23:43,721 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 16:23:44,061 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 16:23:44,388 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 16:23:44,722 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 16:23:45,071 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 16:23:45,402 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 16:23:45,731 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 16:23:46,081 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 16:23:46,408 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 16:23:46,742 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 16:23:47,069 >>	[START]  FeatureExtractor.extract()
[INFO] 2019-02-16 16:23:47,409 >>	[FINISH] FeatureExtractor.extract(): [elapsed_time] >> 00:00:00
[INFO] 2019-02-16 16:23:47,740 >>	[FINISH] Processor.preprocess(): [elapsed_time] >> 00:00:10
[INFO] 2019-02-16 16:23:48,074 >>	[START]  Processor.train()
[INFO] 2019-02-16 16:23:48,398 >>	[START]  PyTorchClassifier.train()
[INFO] 2019-02-16 16:23:48,727 >>		 >> 0 folds start
[INFO] 2019-02-16 16:23:49,059 >>		 	 Generating datasets...
[INFO] 2019-02-16 16:23:49,407 >>		 	 	 Reading train_Kernel02.csv...
[INFO] 2019-02-16 16:23:55,046 >>		 	 	 Reading train_Kernel01.csv...
[INFO] 2019-02-16 16:24:23,651 >>		 	 	 Reading train_Display.csv...
[INFO] 2019-02-16 16:24:42,140 >>		 	 	 Reading train_OneHotEncoding.csv...
[INFO] 2019-02-16 16:25:02,507 >>		 	 	 Reading train_Os.csv...
[INFO] 2019-02-16 16:25:24,889 >>		 	 	 Reading train_Binary.csv...
[INFO] 2019-02-16 16:25:48,501 >>		 	 	 Reading train_Numerical.csv...
[INFO] 2019-02-16 16:26:09,346 >>		 	 	 Reading train_Categorical.csv...
[INFO] 2019-02-16 16:27:39,253 >>		 	 	 Reading validate_Kernel02.csv...
[INFO] 2019-02-16 16:27:41,517 >>		 	 	 Reading validate_Kernel01.csv...
[INFO] 2019-02-16 16:27:48,474 >>		 	 	 Reading validate_Display.csv...
[INFO] 2019-02-16 16:27:53,320 >>		 	 	 Reading validate_OneHotEncoding.csv...
[INFO] 2019-02-16 16:27:58,443 >>		 	 	 Reading validate_Os.csv...
[INFO] 2019-02-16 16:28:03,876 >>		 	 	 Reading validate_Binary.csv...
[INFO] 2019-02-16 16:28:09,368 >>		 	 	 Reading validate_Numerical.csv...
[INFO] 2019-02-16 16:28:14,702 >>		 	 	 Reading validate_Categorical.csv...
[INFO] 2019-02-16 16:40:18,103 >>		 	 Datasets were generated.
[ERROR] 2019-02-16 16:50:25,810 >>	Unexpected Exception Occurred.
Traceback (most recent call last):
  File "src/main.py", line 23, in <module>
    main(get_option())
  File "src/main.py", line 14, in main
    ProcessorFactory.process(args)
  File "/home/berry/Malware/src/processor_factory.py", line 39, in process
    validity, predict = processor.process()
  File "/home/berry/Malware/src/processor.py", line 42, in process
    validity = None if only_prediction() and model_exist() else self.__train(feature_names)
  File "/home/berry/Malware/src/save_log.py", line 112, in wrapper
    result = func(*args, **kargs)
  File "/home/berry/Malware/src/processor.py", line 69, in __train
    return self.classifier.train(feature_names)
  File "/home/berry/Malware/src/save_log.py", line 112, in wrapper
    result = func(*args, **kargs)
  File "/home/berry/Malware/src/classifier/pytorch_classifier.py", line 88, in train
    verbose=self.params["verbose"])
  File "/home/berry/Malware/src/classifier/torch_util.py", line 70, in train_model
    outputs = model(inputs)
  File "/home/berry/.pyenv/versions/3.6.6/lib/python3.6/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/home/berry/Malware/src/classifier/pytorch_network/SimpleNet.py", line 19, in forward
    x = self.bn1(x)
  File "/home/berry/.pyenv/versions/3.6.6/lib/python3.6/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/home/berry/.pyenv/versions/3.6.6/lib/python3.6/site-packages/torch/nn/modules/batchnorm.py", line 76, in forward
    exponential_average_factor, self.eps)
  File "/home/berry/.pyenv/versions/3.6.6/lib/python3.6/site-packages/torch/nn/functional.py", line 1619, in batch_norm
    raise ValueError('Expected more than 1 value per channel when training, got input size {}'.format(size))
ValueError: Expected more than 1 value per channel when training, got input size torch.Size([1, 100])
