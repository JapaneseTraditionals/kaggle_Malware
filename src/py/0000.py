from module.get_option import *
from module.import_libs import *
from module.load_csv import *
from module.load_validation import *
from module.save_log import *
from module.use_features import *
from module.use_lgbm import *

# params
VERSION = os.path.basename(__file__)[0:4]
ROOT_PATH = Path(__file__).absolute().parents[2]

def preprocess_dd(ddf, pre_list):
    return ddf

def preprocess_pd(df, pre_list):
    return df

def clean(is_train):
    get_logger(VERSION).info("Reading csv file...")
    train_dtype = read_csv_dtype(is_train=is_train)
    ddf = "hoge" # Read csv
    
    get_logger(VERSION).info("loading features...")
    load_ddf = load_features(ROOT_PATH, is_train=is_train)
    # load_features * n
    # join features
    pre_list = ['hoge'] # Create list of column names of df or ddf

    get_logger(VERSION).info("Preprocessing...")
    ddf = preprocess_dd(ddf, pre_list)
    df = ddf # df = ddf.compute()
    df = preprocess_pd(df, pre_list)

    return df

def process_train():
    get_logger(VERSION).info("-- Start processing train data --")
    df = clean(is_train=True)

    get_logger(VERSION).info("Fitting train data...")
    params = {
        "device"    : "cpu" 
    }
    clf = fit_train(df, params)

    get_logger(VERSION).info("Saving features of train data...")
    save_features(df, "hoge", ROOT_PATH, is_train=True)
    # save_features * n

    get_logger(VERSION).info("-- End processing train data --")
    return clf

def process_test(clf):
    get_logger(VERSION).info("-- Start processing test data --")
    df = clean(is_train=False)

    get_logger(VERSION).info("Predicting test data...")
    submit = predict_test(df, clf)

    get_logger(VERSION).info("Saving features of train data...")
    save_features(df, "hoge", ROOT_PATH, is_train=False)
    # save_features * n

    get_logger(VERSION).info("-- Start processing test data --")
    return submit

@stop_watch
def main(args):
    get_logger(VERSION).info("== Start Process [{}] ==".format(VERSION))
    clf = process_train()
    if not args.dontPredict: 
        submit = process_test(clf)
    get_logger(VERSION).info("== End Process   [{}] ==".format(VERSION))

if __name__=="__main__":
    gc.enable()
    create_logger(VERSION)
    try:
        main(get_option())
    except Exception:
        get_logger(VERSION).exception("Unexpected Exception Occurred.")

