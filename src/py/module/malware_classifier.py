from module.classifier_type import ClassifierType
from module.save_log import stop_watch
import os
import sys
from pathlib import Path
import matplotlib
matplotlib.use("agg")
import matplotlib.pyplot as plt
import seaborn as sns


class MalwareClassifier():
    def __init__(self, classifier_type, params):
        self.classifier_type = classifier_type
        self.params = params
        self.version = os.path.splitext(sys.argv[0])[0][-4:]
        print(self.version)

    @stop_watch("MalwareClassifier.fit()")
    def fit(self, train_df):
        clf = "Please define lgbm function"
        importances = "Please calculate importances of features"
        self.__save_importances(importances, self.version)
        self.clf = clf

    @stop_watch("MalwareClassifier.predict()")
    def predict(self, test_df):
        submit = "Please predict df with self.clf"
        return submit

    def __save_importances(self, importances, version):
        """
        # TODO: Implementation of CSV
        mean_gain = importances_[['gain', 'feature']].groupby('feature').mean()
        importances_['mean_gain'] = importances_['feature'].map(mean_gain['gain'])
        plt.figure(figsize=(16, 24))
        sns.barplot(x='gain', y='feature',
                    data=importances_.sort_values('mean_gain', ascending=False))
        plt.tight_layout()
        plt.savefig(Path(__file__).absolute().parents[3] / "data" /
                    "importances" / "{}.png".format(version))
        """
        pass
