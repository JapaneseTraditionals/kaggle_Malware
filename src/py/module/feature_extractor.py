import importlib
from pathlib import Path
from module.import_libs import *
from module.save_log import stop_watch

ROOT_PATH = Path(__file__).absolute().parents[3]


class FeatureExtractor():
    def __init__(self, feature_map, input_path, feature_type):
        self.feature_map = feature_map
        self.input_path = input_path
        self.feature_type = feature_type

    @stop_watch("FeatureExtractor/extract()")
    def extract(self, is_train):
        """
        Extract features for each group
        Concrete implementations are py/module/features/[feature_type]/*.py
        """
        module_path = "module.features." + self.feature_type
        df_list = []
        for group, features in self.feature_map.items():
            group_path = module_path + "." + group
            module = importlib.import_module(group_path)
            group_feature_class = getattr(module, group)
            df = group_feature_class.extract(features)
            df_list.append(df)
        print(df_list)

