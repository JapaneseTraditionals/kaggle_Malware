from pathlib import Path
from module.feature_extractor import FeatureExtractor
from module.import_libs import *
from module.moco_classifier import MocoClassifier
from module.save_log import stop_watch

ROOT_PATH = Path(__file__).absolute().parents[3]


class Processor():
    """
    For processing train and test
    """
    def __init__(self, args, feature_map,
                 classifier_type, params,
                 input_path=ROOT_PATH / "input"):
        """
        Parameters
        args: args from main (src/py/[index].py)
        feature_map: feature_map from main
        classifier_type: LGBM or CAT_BOOST or ...
        lgbm_params: feature_map from main
        [optional] input_path: file path of input files.
        You'd better use this parameter when you want to split datasets.
        """
        self.args = args
        self.feature_extractor = FeatureExtractor(feature_map, input_path)
        self.classifier = MocoClassifier(classifier_type,  params)

    def process(self):
        """
        For processing train and test
        """
        validity = self.__process_train()
        predict = None
        if not self.args.dontPredict:
            predict = self.__process_test()
        return validity, predict

    @stop_watch("Processor/process_train()")
    def __process_train(self):
        """
        Processing of train
        1. Feature Extraction
        2. Fitting train data with lgbm
        ---
        Return
        validity: validation output of this process
        """
        df = self.feature_extractor.extract(is_train=True)
        self.classifier.fit(df)
        validity = 0
        return validity

    @stop_watch("Processor/process_test()")
    def __process_test(self):
        """
        Processing of test
        1. Feature Extraction
        2. Predict test data with classifier obtained from process_train()
        """
        df = self.feature_extractor.extract(is_train=False)
        submit = self.classifier.predict(df)
        return submit
