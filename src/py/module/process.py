from module.get_option import *
from module.import_libs import *
from module.load_csv import *
from module.load_validation import *
from module.save_log import *
from module.use_features import *
from module.use_lgbm import *

ROOT_PATH = Path(__file__).absolute().parents[2]

def preprocess_dd(ddf, pre_list):
    return ddf


def preprocess_pd(df, pre_list):
    return df


def clean(version, is_train):
    get_logger(version).info("Reading csv file...")
    train_dtype = read_csv_dtype(is_train=is_train)
    ddf = "hoge" # Read csv
    
    get_logger(version).info("loading features...")
    load_ddf = load_features(ROOT_PATH, is_train=is_train)
    # load_features * n
    # join features
    pre_list = ['hoge'] # Create list of column names of df or ddf

    get_logger(version).info("Preprocessing...")
    ddf = preprocess_dd(ddf, pre_list)
    df = ddf # df = ddf.compute()
    df = preprocess_pd(df, pre_list)

    return df


def process_train(version, lgbm_params):
    get_logger(version).info("-- Start processing train data --")
    df = clean(version, is_train=True)

    get_logger(version).info("Fitting train data...")
    clf = fit_train(df, lgbm_params)

    get_logger(version).info("Saving features of train data...")
    save_features(df, "hoge", ROOT_PATH, is_train=True)
    # save_features * n

    get_logger(version).info("-- End processing train data --")
    return clf


def process_test(version, clf):
    get_logger(version).info("-- Start processing test data --")
    df = clean(version, is_train=False)

    get_logger(version).info("Predicting test data...")
    submit = predict_test(df, clf)

    get_logger(version).info("Saving features of train data...")
    save_features(df, "hoge", ROOT_PATH, is_train=False)
    # save_features * n

    get_logger(version).info("-- Start processing test data --")
    return submit


def process(args, version, lgbm_params):
    get_logger(version).info("== Start Process [{}] ==".format(version))
    clf = process_train(version, lgbm_params)
    if not args.dontPredict:
        submit = process_test(version, clf)
    get_logger(version).info("== End Process   [{}] ==".format(version))
