from module.feature_extractor import *
from module.get_option import *
from module.import_libs import *
from module.load_csv import *
from module.load_validation import *
from module.save_log import *
from module.use_features import *
from module.use_lgbm import *

ROOT_PATH = Path(__file__).absolute().parents[3]


@stop_watch
def clean(feature_map, input_path, feature_type, is_train):
    # Read csv
    """
    with ProgressBar():
        ddf = dd.read_csv(get_input_path(input_path, is_train),
                          dtype=get_csv_dtype())
        df = reduce_mem_usage(ddf.compute())
    print(df.head())
    """
    FeatureExtractor.extract(feature_map, input_path, feature_type, is_train)
    df = "hoge"
    load_ddf = load_features(ROOT_PATH, is_train=is_train)
    # load_features * n
    # join features
    pre_list = ['hoge'] # Create list of column names of df or ddf

    return df


@stop_watch
def process_train(feature_map, lgbm_params, input_path, feature_type):
    df = clean(feature_map, input_path, feature_type, is_train=True)

    save_features(df, "hoge", ROOT_PATH, is_train=True)

    clf = fit_train(df, lgbm_params)
    validity = 0

    return validity, clf


@stop_watch
def process_test(feature_map, clf, input_path, feature_type):
    df = clean(feature_map, input_path, feature_type, is_train=False)

    submit = predict_test(df, clf)

    save_features(df, "hoge", ROOT_PATH, is_train=False)
    # save_features * n

    return submit


def process(args, feature_map, lgbm_params,
            input_path=ROOT_PATH / "input", feature_type="neutral"):
    validity, clf = process_train(feature_map, lgbm_params,
                                  input_path=input_path,
                                  feature_type=feature_type)
    predict = None
    if not args.dontPredict:
        predict = process_test(feature_map, clf,
                               input_path=input_path,
                               feature_type=feature_type)
    return validity, predict
