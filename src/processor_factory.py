from pathlib import Path
import json
from classifier_type import ClassifierType
from logging import getLogger
from processor import Processor
from save_log import get_version, need_prediction
from exceptions import DuplicateVersionException


class ProcessorFactory():

    ROOT_PATH = Path(__file__).absolute().parents[1]

    @classmethod
    def process(cls, args):
        """
        main method
        """
        config_file = cls.__load_config(args.version)
        with config_file.open() as f:
            params_dict = json.load(f)
        validities = []
        predicts = []
        for name, params in params_dict.items():
            feature_groups = params["Preprocess"]
            clf_type = params["Classifier"]
            clf_params = params["ClassifierParams"]
            dataset_path = cls.ROOT_PATH / params["DatasetPath"]
            processor = Processor(feature_groups,
                                  ClassifierType.parseType(clf_type),
                                  clf_params, dataset_path)
            validity, predict = processor.process()
            ProcessorFactory.__print_log(name, clf_type,
                                         clf_params, dataset_path)
            validities.append(validity)
            predicts.append(predict)

        cls.__save_validities(validities)
        if need_prediction():
            cls.__save_predicts(predicts)

    @classmethod
    def __load_config(cls, version):
        """
        version : string
        return  : PosixPath
        """
        version_file_list = list(cls.ROOT_PATH.glob("config/" + version + "*.json"))
        if len(version_file_list) > 1 :
            raise DuplicateVersionException()
        return version_file_list[0]

    @classmethod
    def __save_validities(validities):
        hoge = "Calc CV of all splited validations"

    @classmethod
    def __save_predicts(predicts):
        hoge = "Write csv from predicts"

    @classmethod
    def __print_log(name, clf_type, clf_params, input_path):
        version = get_version()
        getLogger(version).info("================================")
        getLogger(version).info("Processor Name: {}".format(name))
        getLogger(version).info("Input Path: {}".format(input_path))
        getLogger(version).info("Classifier Type: {}".format(clf_type))
        for key, value in clf_params.items():
            getLogger(version).info("{}: {}".format(key, value))
        getLogger(version).info("================================")
