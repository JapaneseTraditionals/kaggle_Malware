from pathlib import Path
import json
from classifier_type import ClassifierType
from processor import Processor


class ProcessorFactory():
    def process(args):
        ROOT_PATH = Path(__file__).absolute().parents[1]
        config = open(args.config, 'r')
        params_dict = json.load(config)
        validities = []
        predicts = []
        for params in params_dict.values():
            features = params["Feature"]
            clf_type = ClassifierType.parseType(params["Classifier"])
            clf_params = params["ClassifierParams"]
            input_path = ROOT_PATH / params["InputPath"]
            processor = Processor(args, features, clf_type,
                                  clf_params, input_path)
            validity, predict = processor.process()
            validities.append(validity)
            predicts.append(predict)

        ProcessorFactory.__save_validities(validities)
        if not args.dontPredict:
            ProcessorFactory.__save_predicts(predicts)

    def __save_validities(validities):
        hoge = "Calc CV of all splited validations"

    def __save_predicts(predicts):
        hoge = "Write csv from predicts"
