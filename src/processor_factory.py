from pathlib import Path
import json
from classifier_type import ClassifierType
from logging import getLogger
from processor import Processor
from save_log import get_version


class ProcessorFactory():
    def process(args):
        ROOT_PATH = Path(__file__).absolute().parents[1]
        config = open(args.config, 'r')
        params_dict = json.load(config)
        validities = []
        predicts = []
        for name, params in params_dict.items():
            features = params["Feature"]
            clf_type = params["Classifier"]
            clf_params = params["ClassifierParams"]
            input_path = params["InputPath"]
            processor = Processor(args, features,
                                  ClassifierType.parseType(clf_type),
                                  clf_params, ROOT_PATH / input_path)
            validity, predict = processor.process()
            ProcessorFactory.__print_log(name, clf_type,
                                         clf_params, input_path)
            validities.append(validity)
            predicts.append(predict)

        ProcessorFactory.__save_validities(validities)
        if not args.dontPredict:
            ProcessorFactory.__save_predicts(predicts)

    def __save_validities(validities):
        hoge = "Calc CV of all splited validations"

    def __save_predicts(predicts):
        hoge = "Write csv from predicts"

    def __print_log(name, clf_type, clf_params, input_path):
        version = get_version()
        getLogger(version).info("================================")
        getLogger(version).info("Processor Name: {}".format(name))
        getLogger(version).info("Input Path: {}".format(input_path))
        getLogger(version).info("Classifier Type: {}".format(clf_type))
        for key, value in clf_params.items():
            getLogger(version).info("{}: {}".format(key, value))
        getLogger(version).info("================================")

