import torch.nn as nn
import torch.nn.functional as F


class DeepNet(nn.Module):
    def __init__(self, input_dim, params):
        super(DeepNet, self).__init__()
        self.fc1 = nn.Linear(input_dim, params["hidden_size1"])
        self.fc2 = nn.Linear(params["hidden_size1"], params["hidden_size2"])
        self.fc3 = nn.Linear(params["hidden_size2"], params["hidden_size3"])
        self.fc4 = nn.Linear(params["hidden_size3"], params["hidden_size4"])
        self.fc5 = nn.Linear(params["hidden_size4"], params["hidden_size5"])
        self.fc6 = nn.Linear(params["hidden_size5"], 1)
        self.drop1 = nn.Dropout(p=params["dropout_p1"])
        self.drop2 = nn.Dropout(p=params["dropout_p2"])
        self.drop3 = nn.Dropout(p=params["dropout_p3"])
        self.drop4 = nn.Dropout(p=params["dropout_p4"])
        self.drop5 = nn.Dropout(p=params["dropout_p5"])
        self.bn1 = nn.BatchNorm1d(params["hidden_size1"])
        self.bn2 = nn.BatchNorm1d(params["hidden_size2"])
        self.bn3 = nn.BatchNorm1d(params["hidden_size3"])
        self.bn4 = nn.BatchNorm1d(params["hidden_size4"])
        self.bn5 = nn.BatchNorm1d(params["hidden_size5"])
        self.negative_slope1 = params["negative_slope1"]
        self.negative_slope2 = params["negative_slope2"]
        self.negative_slope3 = params["negative_slope3"]
        self.negative_slope4 = params["negative_slope4"]
        self.negative_slope5 = params["negative_slope5"]

    def forward(self, x):
        x = self.fc1(x)
        x = self.drop1(x)
        x = self.bn1(x)
        x = F.leaky_relu(x, self.negative_slope1)

        x = self.fc2(x)
        x = self.drop2(x)
        x = self.bn2(x)
        x = F.leaky_relu(x, self.negative_slope2)

        x = self.fc3(x)
        x = self.drop3(x)
        x = self.bn3(x)
        x = F.leaky_relu(x, self.negative_slope3)

        x = self.fc4(x)
        x = self.drop4(x)
        x = self.bn4(x)
        x = F.leaky_relu(x, self.negative_slope4)

        x = self.fc5(x)
        x = self.drop5(x)
        x = self.bn5(x)
        x = F.leaky_relu(x, self.negative_slope5)

        x = self.fc6(x)
        x = F.sigmoid(x)
        return x
