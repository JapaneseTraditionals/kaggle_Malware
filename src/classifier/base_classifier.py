import os
import pandas as pd
from pathlib import Path


class BaseClassifier():
    def __init__(self, params, dataset_name):
        os.environ['KMP_DUPLICATE_LIB_OK'] = "True"
        self.params = params
        self.dataset_name = dataset_name

    def get_feature_df(self, feature_names, valid_dir, part):
        """
        Ex)
        dataset_name    : min, ...
        feature_names   : __preprocess() return
        valid_dir       : "valid0", "valid1", ...
        part            : "train", "validate", "test"
        """
        feature_df = None
        featureset_path = Path(__file__).absolute().parents[2] / "data" / "features" / self.dataset_name / valid_dir
        for group, feature_list in feature_names.items():
            df = pd.read_csv(featureset_path / "{}_{}.csv".format(part, group),
                             usecols=["MachineIdentifier"] + feature_list)
            if feature_df is None:
                feature_df = df
            else:
                feature_df = feature_df.merge(right=df,
                                              how="inner",
                                              on="MachineIdentifier")
        if part in ["train", "validate"]:
            HasDetections = pd.read_csv(Path(__file__).absolute().parents[2] / "input" / "train.csv",
                                        usecols=["MachineIdentifier", "HasDetections"])
            feature_df = feature_df.merge(right=HasDetections,
                                          on="MachineIdentifier",
                                          how="inner")
        return feature_df
