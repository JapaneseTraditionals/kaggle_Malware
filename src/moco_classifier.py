from classifier_type import ClassifierType
from save_log import stop_watch


class MocoClassifier():
    def __init__(self, classifier_type, params):
        self.classifier_type = classifier_type
        self.params = params

    @stop_watch("MocoClassifier.fit()")
    def fit(self, train_df):
        clf = self.__fit_as_classifier_type(train_df)
        importances = "Please calculate importances of features"
        self.__save_importances(importances)
        self.clf = clf

    @stop_watch("MocoClassifier.predict()")
    def predict(self, test_df):
        if self.classifier_type == ClassifierType.LGBM:
            return self.__predict_with_lgbm(test_df)
        elif self.classifier_type == ClassifierType.CAT_BOOST:
            return self.__predict_with_cat_boost(test_df)

    def __fit_as_classifier_type(self, df):
        if self.classifier_type == ClassifierType.LGBM:
            return self.__fit_with_lgbm(df)
        elif self.classifier_type == ClassifierType.CAT_BOOST:
            return self.__fit_with_cat_boost(df)
        else:
            return self.__fit_with_lgbm(df)

    def __fit_with_lgbm(self, df):
        clf = "Please define lgbm functions"
        return clf

    def __predict_with_lgbm(self, df):
        submit = "Please predict df with self.clf"
        return submit

    def __fit_with_cat_boost(self, df):
        clf = "Please define cat boost functions"
        return clf

    def __predict_with_cat_boost(self, df):
        submit = "Please predict df with self.clf"
        return submit

    def __save_importances(self, importances):
        """
        # TODO: Implementation of CSV
        mean_gain = importances_[['gain', 'feature']].groupby('feature').mean()
        importances_['mean_gain'] = importances_['feature'].map(mean_gain['gain'])
        plt.figure(figsize=(16, 24))
        sns.barplot(x='gain', y='feature',
                    data=importances_.sort_values('mean_gain', ascending=False))
        plt.tight_layout()
        plt.savefig(Path(__file__).absolute().parents[3] / "data" /
                    "importances" / "{}.png".format(version))
        """
        pass
