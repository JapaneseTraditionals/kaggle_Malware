import sys
from pathlib import Path
from importlib import import_module
import dask.dataframe as dd
from dask.diagnostics import ProgressBar
from save_log import stop_watch


class FeatureExtractor():
    def __init__(self, feature_groups, input_path):
        self.feature_groups = feature_groups
        self.input_path = input_path

    @stop_watch("FeatureExtractor.extract()")
    def extract(self, is_train):
        """
        Extract features for each group
                feature_df = group_feature_instance.extract()
        Concrete implementations are root/features/*.py
        """
        sys.path.append(str(Path(__file__).absolute().parents[1]))

        feature_df = None
        for group, features in self.feature_groups.items():
            group_feature_class = getattr(import_module("features." + group), group)
            group_feature_instance = group_feature_class(features, self.input_path, is_train)
            if feature_df is None:
                feature_df = group_feature_instance.extract()
            else:
                feature_df = feature_df.merge(right=group_feature_instance.extract(),
                                              how="inner",
                                              on="MachineIdentifier")

        if is_train:
            HasDetections = dd.read_csv(Path(self.input_path) / "train.csv",
                                        usecols=["MachineIdentifier", "HasDetections"])
            feature_df = feature_df.merge(right=HasDetections,
                                          how="inner",
                                          on="MachineIdentifier")

        with ProgressBar():
            feature_df = feature_df.compute()

        return feature_df
