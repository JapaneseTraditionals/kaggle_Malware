import sys
from pathlib import Path
from importlib import import_module
import dask.dataframe as dd
from dask.diagnostics import ProgressBar
from save_log import stop_watch


class FeatureExtractor():
    def __init__(self, dataset_path, feature_groups):
        self.dataset_path = dataset_path
        self.featureset_path = dataset_path.parents[1] / "features" / dataset_path.name
        self.feature_groups = feature_groups
        self.feature_names = []

    @stop_watch("FeatureExtractor.extract()")
    def extract(self, part, valid_dir):
        """
        Input:
            part > ["train", "validate", "test"]
        Extract features for each group
                feature_df = group_feature_instance.extract()
        Concrete implementations are root/features/*.py
        """
        if part in ["train", "validate"]:
            input_path = self.dataset_path / valid_dir / "{}.csv".format(part)
        elif part == "test":
            input_path = self.dataset_path / "{}.csv".format(part)

        sys.path.append(str(Path(__file__).absolute().parents[1]))

        feature_dict = {}
        for group, features in self.feature_groups.items():
            output_path = self.featureset_path / valid_dir / "{}_{}.csv".format(part, group)

            group_feature_class = getattr(import_module("features." + group), group)
            group_feature_instance = group_feature_class(features, input_path, output_path)
            feature_dict[group] = group_feature_instance.extract()

        self.feature_names = feature_dict

    def get_feature_names(self):
        return self.feature_names
