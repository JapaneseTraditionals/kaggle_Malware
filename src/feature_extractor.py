import sys
from pathlib import Path
from importlib import import_module
import dask.dataframe as dd
from dask.diagnostics import ProgressBar
from save_log import stop_watch


class FeatureExtractor():
    def __init__(self, feature_groups, input_path):
        self.feature_groups = feature_groups
        self.input_path = input_path

    @stop_watch("FeatureExtractor.extract()")
    def extract(self, is_train):
        """
        Extract features for each group
                feature_df = group_feature_instance.extract()
        Concrete implementations are root/features/*.py
        """
        sys.path.append(str(Path(__file__).absolute().parents[1]))

        feature_list = []
        for group, features in self.feature_groups.items():
            group_feature_class = getattr(import_module("features." + group), group)
            group_feature_instance = group_feature_class(features, self.input_path, is_train)
            feature_list.append(group_feature_instance.extract())

        if is_train:
            part = "train"
            base_col = ["MachineIdentifier", "HasDetections"]
        else:
            part = "test"
            base_col = ["MachineIdentifier"]

        with ProgressBar():
            feature_df = dd.read_csv(Path(self.input_path) / "{}.csv".format(part),
                                     usecols=base_col).compute()
            for group in feature_list:
                feature_df = feature_df.merge(right=group.compute(), how="inner", on="MachineIdentifier")
        return feature_df
