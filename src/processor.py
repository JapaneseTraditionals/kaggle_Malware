from feature_extractor import FeatureExtractor
from moco_classifier import MocoClassifier
from save_log import stop_watch, need_prediction


class Processor():
    """
    For processing train and test
    """
    def __init__(self, feature_groups,
                 clf_type, clf_params, input_path):
        """
        Parameters
        feature_groups  <dict>   : features dictionary in json
        clf_type        <object> : classifier type in json
        clf_params      <dict>   : classifier parameters in json
        input_path      <string> : input csv file path in json
        """
        self.feature_extractor = FeatureExtractor(feature_groups, input_path)
        self.classifier = MocoClassifier(clf_type, clf_params)

    def process(self):
        """
        For processing train and test
        """
        validity = self.__process_train()
        predict = None
        if need_prediction():
            predict = self.__process_test()
        return validity, predict

    @stop_watch("Processor.process_train()")
    def __process_train(self):
        """
        Processing of train
        1. Feature Extraction
        2. Fitting train data with lgbm
        ---
        Return
        validity: validation output of this process
        """
        df = self.feature_extractor.extract(is_train=True)
        print(df)
        assert False
        self.classifier.fit(df)
        validity = 0
        return validity

    @stop_watch("Processor.process_test()")
    def __process_test(self):
        """
        Processing of test
        1. Feature Extraction
        2. Predict test data with classifier obtained from process_train()
        """
        df = self.feature_extractor.extract(is_train=False)
        submit = self.classifier.predict(df)
        return submit
