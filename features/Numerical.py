from features.base_feature import BaseFeature
from exceptions import IrregularExtractArgumentException


class Numerical(BaseFeature):

    def get_loadcols(self):
        cols = [
            "Census_ProcessorCoreCount",
            "Census_PrimaryDiskTotalCapacity",
            "Census_SystemVolumeTotalCapacity",
            "Census_TotalPhysicalRAM",
            "Census_InternalPrimaryDiagonalDisplaySizeInInches",
            "Census_InternalPrimaryDisplayResolutionHorizontal",
            "Census_InternalPrimaryDisplayResolutionVertical",
            "Census_InternalBatteryNumberOfCharges"
        ]
        return cols

    def extract(self):
        return super().extract()

    def plain(self, df):
        return df

    def fillna(self, df, val):
        if isinstance(val, (int, float)):
            df.fillna(val, inplace=True)
        elif val == "mean":
            mean = df.iloc[:, 1].mean()
            df.fillna(mean, inplace=True)
        elif val == "median":
            median = df.iloc[:, 1].median()
            df.fillna(median, inplace=True)
        elif val == "mode":
            mode = df.iloc[:, 1].mode()[0]
            df.fillna(mode, inplace=True)
        else:
            raise IrregularExtractArgumentException
        return df
