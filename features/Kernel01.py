from features.base_feature import BaseFeature
from pathlib import Path
import numpy as np
import pandas as pd
import dask.dataframe as dd
import datetime
from exceptions import IrregularExtractArgumentException
from features.get_dtype import get_csv_dtype


class Kernel01(BaseFeature):
    """
    [ref]
    https://www.kaggle.com/adityaecdrid/simple-feature-engineering-xd
    """

    def get_loadcols(self):
        cols = ["AppVersion", "EngineVersion",
                "AvSigVersion",
                "OsBuildLab",
                "AVProductsEnabled",
                "AVProductStatesIdentifier",
                "AVProductsInstalled",
                "SmartScreen",
                "Census_SystemVolumeTotalCapacity",
                "Census_PrimaryDiskTotalCapacity",
                "Census_InternalPrimaryDisplayResolutionHorizontal",
                "Census_InternalPrimaryDisplayResolutionVertical",
                "Census_TotalPhysicalRAM",
                "Census_ProcessorCoreCount",
                "CountryIdentifier",
                "Census_InternalBatteryType",
                "Census_GenuineStateName"
                ]
        return cols

    def extract(self):
        return super().extract()

    def Week_from(self, df, year):
        """
        AvSigVersion
        """
        start_day = datetime.datetime(year, 1, 1)
        datedict = np.load(Path(__file__).absolute().parents[1] / "data" / "external" / "AvSigVersionTimestamps.npy")[()]
        datedict = {key: (datedict[key] - start_day).days // 7 for key in datedict.keys()}
        df["AvSigVersion"] = df["AvSigVersion"].map(datedict)
        df["AvSigVersion"] = df["AvSigVersion"].fillna(-1)
        return df

    def newSmartScreen_LabelEncoding(self, df):
        def reformat(se):
            se = se.str.lower()
            se.replace(
                {"promt": "prompt",
                 "promprt": "prompt",
                 "00000000": "0",
                 "enabled": "on",
                 "of": "off",
                 "deny": "0",
                 "requiredadmin": "requireadmin"}, inplace=True)
            return se

        # LabelEncoding
        full_df = self.load_full()[["MachineIdentifier", "SmartScreen"]]
        full_df["SmartScreen"] = reformat(full_df["SmartScreen"])
        full_df.sort_values("MachineIdentifier", inplace=True)
        labels, uniques = pd.factorize(full_df["SmartScreen"])
        full_df["SmartScreen"] = labels
        M_id = df["MachineIdentifier"].values.tolist()
        back_df = full_df[full_df["MachineIdentifier"].isin(M_id)]

        return back_df

    def sort_by_date(self, df):
        """
        AvSigVersion_sort_by_date
        """
        def my_key(item):
            return tuple(int(part) for part in item[0].replace("1.2&#x17;3.1144.0", "1.273.1144.0").split("."))

        datedict = np.load(Path(__file__).absolute().parents[1] / "data" / "external" / "AvSigVersionTimestamps.npy")[()]
        items = dict(sorted(datedict.items(), key=my_key))
        new_map, cnt = {}, 0
        for key in items.keys():
            new_map[key] = cnt
            cnt += 1

        df["AvSigVersion"] = df["AvSigVersion"].map(new_map)
        df["AvSigVersion"] = df["AvSigVersion"].fillna(-1)
        return df

    def build_LabelEncoding(self, df):
        """
        AvSigVersion_build_LabelEncoding
        """
        full_df = self.load_full()[["MachineIdentifier", "AvSigVersion"]]

        full_df["AvSigVersion"] = full_df["AvSigVersion"].replace(r'[^\.|0-9]', '1.273.1826.0', regex=True)
        full_df["AvSigVersion"] = full_df["AvSigVersion"].apply(lambda x: x.split(".")[1])

        full_df.sort_values("MachineIdentifier", inplace=True)
        labels, uniques = pd.factorize(full_df["AvSigVersion"])
        full_df["AvSigVersion"] = labels
        M_id = df["MachineIdentifier"].values.tolist()
        back_df = full_df[full_df["MachineIdentifier"].isin(M_id)]

        return back_df

    def minor_LabelEncoding(self, df):
        """
        AvSigVersion_minor_LabelEncoding
        """
        full_df = self.load_full()[["MachineIdentifier", "AvSigVersion"]]

        full_df["AvSigVersion"] = full_df["AvSigVersion"].replace(r"[^\.|0-9]", "1.273.1826.0", regex=True)
        full_df["AvSigVersion"] = full_df["AvSigVersion"].apply(lambda x: x.split(".")[2])

        full_df.sort_values("MachineIdentifier", inplace=True)
        labels, uniques = pd.factorize(full_df["AvSigVersion"])
        full_df["AvSigVersion"] = labels
        M_id = df["MachineIdentifier"].values.tolist()
        back_df = full_df[full_df["MachineIdentifier"].isin(M_id)]

        return back_df

    def minor_build(self, df):
        """
        AvSigVersion_minor_build
        """
        df["AvSigVersion"] = df["AvSigVersion"].replace(r"[^\.|0-9]", "1.273.1826.0", regex=True)
        df["AvSigVersion"] = df["AvSigVersion"].apply(lambda x: float((x.split(".")[1]) + "." + (x.split(".")[2]))).astype("float32")

        return df

    def secondVersion(self, df):
        """
        EngineVersion_2
        """
        full_df = self.load_full()[["MachineIdentifier", "EngineVersion"]]

        full_df["EngineVersion"] = full_df["EngineVersion"].apply(lambda x: x.split('.')[2]).astype("category")

        full_df.sort_values("MachineIdentifier", inplace=True)
        labels, uniques = pd.factorize(full_df["EngineVersion"])
        full_df["EngineVersion"] = labels
        M_id = df["MachineIdentifier"].values.tolist()
        back_df = full_df[full_df["MachineIdentifier"].isin(M_id)]

        return back_df

    def exact(self, df):
        """
        OsBuildLab_exact
        """
        full_df = self.load_full()[["MachineIdentifier", "OsBuildLab"]]

        full_df["OsBuildLab"] = full_df["OsBuildLab"].fillna('17134.1.amd64fre.rs4_release.180410-1804')
        full_df["OsBuildLab"] = full_df["OsBuildLab"].apply(lambda x: str(x).split('.')[0] + '.' + str(x).split('.')[1]).astype("category")

        full_df.sort_values("MachineIdentifier", inplace=True)
        labels, uniques = pd.factorize(full_df["OsBuildLab"])
        full_df["OsBuildLab"] = labels
        M_id = df["MachineIdentifier"].values.tolist()
        back_df = full_df[full_df["MachineIdentifier"].isin(M_id)]

        return back_df

    def subVersion(self, df, num):
        """
        AppVersion_1
        AppVersion_2
        AppVersion_3
        """
        full_df = self.load_full()[["MachineIdentifier", "AppVersion"]]

        full_df["AppVersion"] = full_df["AppVersion"].apply(lambda x: x.split('.')[num]).astype("category")

        full_df.sort_values("MachineIdentifier", inplace=True)
        labels, uniques = pd.factorize(full_df["AppVersion"])
        full_df["AppVersion"] = labels
        M_id = df["MachineIdentifier"].values.tolist()
        back_df = full_df[full_df["MachineIdentifier"].isin(M_id)]

        return back_df

    def no_av_at_risk(self, df):
        """
        AVProductsEnabled
        """
        df["AVProductsEnabled"] = (df["AVProductsEnabled"] == 0)

        return df

    def not_genuine_user(self, df):
        """
        Census_GenuineStateName
        """
        df["Census_GenuineStateName"] = (df["Census_GenuineStateName"] != "IS_GENUINE")

        return df

    def sum(self, df):
        """
        AvSigVersion
        """
        df["AvSigVersion"] = df["AvSigVersion"].replace(r'[^\.|0-9]', '1.273.1826.0', regex=True)
        df["AvSigVersion"] = df["AvSigVersion"].apply(lambda x: float(str(x).split('.')[1]) + float(str(x).split('.')[2]))

        return df

    def hggdec_cnt(self, df):
        """
        Count
        ryIdentifier
        """
        target_countries = [104, 95, 214, 89, 94, 59, 21, 100, 85, 195, 159, 57, 155, 188, 33, 44, 18, 88, 81, 205, 141]
        df["CountryIdentifier"] = df["CountryIdentifier"].isin(target_countries)
        return df

    def batteryGroup(self, df):
        """
        Census_InternalBatteryType
        """
        def group_battery(x):
            x = str(x).lower()
            if "li" in x:
                return 1
            else:
                return 0

        df["Census_InternalBatteryType"] = df["Census_InternalBatteryType"].apply(group_battery)
        return df

    def magic4(self, df):
        """
        AVProductStatesIdentifier
        """
        train = self.load_train()[["MachineIdentifier", "AVProductStatesIdentifier"]]
        top_20 = train["AVProductStatesIdentifier"].value_counts(dropna=False, normalize=True).cumsum().index[:20]
        df["AVProductStatesIdentifier"] = df["AVProductStatesIdentifier"].isin(top_20)
        return df

    def oneLess(self, df):
        """
        AVProductsInstalled
        """
        df["AVProductsInstalled"] = df["AVProductsInstalled"] >= 1
        df["AVProductsInstalled"] = df["AVProductsInstalled"].fillna(False)
        return df

# ============= new feature ============= #
    def from_latest(self, df):
        """
        AvSigVersion_from_latest
        """
        def my_key(item):
            return tuple(int(part) for part in item[0].replace("1.2&#x17;3.1144.0", "1.273.1144.0").split("."))

        datedict = np.load(Path(__file__).absolute().parents[1] / "data" / "external" / "AvSigVersionTimestamps.npy")[()]
        items = dict(sorted(datedict.items(), key=my_key))

        part_key = df["AvSigVersion"].unique()
        new_map, cnt = {}, 0
        for key in items.keys():
            if key in part_key:
                new_map[key] = cnt
                cnt += 1

        df["AvSigVersion"] = df["AvSigVersion"].map(new_map)
        return df

    def mul_sub_version_0_1(self, df):
        temp = df.copy()
        temp["Major"] = [int(s[0]) for s in temp["AppVersion"].astype(str).str.split(".")]
        temp["Minor"] = [int(s[1]) for s in temp["AppVersion"].astype(str).str.split(".")]
        temp["mul_sub_version_0_and_1"] = temp["Major"] * 100 + temp["Minor"]
        del temp["Major"], temp["Minor"], temp["AppVersion"]
        return temp

    def heuristic_SmartScreen_encoding(self, df):
        def reformat(se):
            se = se.str.lower()
            se.replace(
                {"promt": "prompt",
                 "promprt": "prompt",
                 "00000000": "0",
                 "enabled": "on",
                 "of": "off",
                 "deny": "0",
                 "requiredadmin": "requireadmin"}, inplace=True)
            return se

        # LabelEncoding
        full_df = self.load_full()[["MachineIdentifier", "SmartScreen"]]
        full_df["SmartScreen"] = reformat(full_df["SmartScreen"])
        full_df["Class"] = 0.5
        full_df.loc[full_df["SmartScreen"] == "requireadadmin", "Class"] = 1.0
        full_df.loc[full_df["SmartScreen"] == "&#x03", "Class"] = 1.0
        full_df.loc[full_df["SmartScreen"] == "prompt", "Class"] = 1.0
        full_df.loc[full_df["SmartScreen"] == "existsnotset", "Class"] = 0.8
        full_df.loc[full_df["SmartScreen"] == "0", "Class"] = 0.65
        full_df.loc[full_df["SmartScreen"] == "off", "Class"] = 0.6
        full_df.loc[full_df["SmartScreen"] == "&#x01", "Class"] = 0.6
        full_df.loc[full_df["SmartScreen"] == "warn", "Class"] = 0.58
        full_df.loc[full_df["SmartScreen"] == "&#x02", "Class"] = 0.5
        full_df.loc[full_df["SmartScreen"] == "nan", "Class"] = 0.5
        full_df.loc[full_df["SmartScreen"] == "on", "Class"] = 0.0
        del full_df["SmartScreen"]
        return full_df
