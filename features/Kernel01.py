from features.base_feature import BaseFeature
from pathlib import Path
import numpy as np
import pandas as pd
import dask.dataframe as dd
import datetime
from exceptions import IrregularExtractArgumentException
from features.get_dtype import get_csv_dtype


class Kernel01(BaseFeature):
    """
    [ref]
    https://www.kaggle.com/adityaecdrid/simple-feature-engineering-xd
    """

    def get_loadcols(self):
        cols = [
            "AppVersion",
            "EngineVersion",
            "AvSigVersion",
            "OsBuildLab",
            "AVProductsEnabled",
            "AVProductStatesIdentifier",
            "SmartScreen",
            "Census_SystemVolumeTotalCapacity",
            "Census_PrimaryDiskTotalCapacity",
            "Census_InternalPrimaryDisplayResolutionHorizontal",
            "Census_InternalPrimaryDisplayResolutionVertical",
            "Census_TotalPhysicalRAM",
            "Census_ProcessorCoreCount",
            "CountryIdentifier",
            "Census_InternalBatteryType"
        ]
        return cols

    def extract(self):
        return super().extract()

    def Week_from(self, df, year):
        """
        AvSigVersion
        """
        start_day = datetime.datetime(year, 1, 1)
        datedict = np.load(Path(__file__).absolute().parents[1] / "data" / "external" / "AvSigVersionTimestamps.npy")[()]
        datedict = {key: (datedict[key] - start_day).days // 7 for key in datedict.keys()}
        df["AvSigVersion"] = df["AvSigVersion"].map(datedict)
        return df

    def newSmartScreen_LabelEncoding(self, df):
        def reformat(se):
            se = se.str.lower()
            se.replace(
                {"promt": "prompt",
                 "promprt": "prompt",
                 "00000000": "0",
                 "enabled": "on",
                 "of": "off",
                 "deny": "0",
                 "requiredadmin": "requireadmin"}, inplace=True)
            return se

        # LabelEncoding
        full_df = self.load_full()[["MachineIdentifier", "SmartScreen"]]
        full_df["SmartScreen"] = reformat(full_df["SmartScreen"])
        full_df.sort_values("MachineIdentifier", inplace=True)
        labels, uniques = pd.factorize(full_df["SmartScreen"])
        full_df["SmartScreen"] = labels
        M_id = df["MachineIdentifier"].values.tolist()
        back_df = full_df[full_df["MachineIdentifier"].isin(M_id)]

        return back_df

    def sort_by_date(self, df):
        """
        AvSigVersion_sort_by_date
        """
        def my_key(item):
            return tuple(int(part) for part in item[0].replace("1.2&#x17;3.1144.0", "1.273.1144.0").split("."))

        datedict = np.load(Path(__file__).absolute().parents[1] / "data" / "external" / "AvSigVersionTimestamps.npy")[()]
        items = dict(sorted(datedict.items(), key=my_key))
        new_map, cnt = {}, 0
        for key in items.keys():
            new_map[key] = cnt
            cnt += 1

        df["AvSigVersion"] = df["AvSigVersion"].map(new_map)
        return df

    def minor_LabelEncoding(self, df):
        """
        AvSigVersion_minor
        """
        df["AvSigVersion"] = df["AvSigVersion"].replace(r'[^\.|0-9]', '1.273.1826.0', regex=True)
        df["AvSigVersion"] = df["AvSigVersion"].apply(lambda x: x.split(".")[1])

        # LabelEncoding
        full_df = self.load_full()[["MachineIdentifier", "AvSigVersion"]]
        full_df.sort_values("MachineIdentifier", inplace=True)
        labels, uniques = pd.factorize(full_df["AvSigVersion"])
        full_df["AvSigVersion"] = labels
        M_id = df["MachineIdentifier"].values.tolist()
        back_df = full_df[full_df["MachineIdentifier"].isin(M_id)]

        return back_df

    def build_LabelEncoding(self, df):
        """
        AvSigVersion_build
        """
        df["AvSigVersion"] = df["AvSigVersion"].replace(r"[^\.|0-9]", "1.273.1826.0", regex=True)
        df["AvSigVersion"] = df["AvSigVersion"].apply(lambda x: x.split(".")[2])

        # LabelEncoding
        full_df = self.load_full()[["MachineIdentifier", "AvSigVersion"]]
        full_df.sort_values("MachineIdentifier", inplace=True)
        labels, uniques = pd.factorize(full_df["AvSigVersion"])
        full_df["AvSigVersion"] = labels
        M_id = df["MachineIdentifier"].values.tolist()
        back_df = full_df[full_df["MachineIdentifier"].isin(M_id)]

        return back_df

    def minor_build(self, df):
        """
        AvSigVersion_minor_build
        """
        df["AvSigVersion"] = df["AvSigVersion"].replace(r"[^\.|0-9]", "1.273.1826.0", regex=True)
        df["AvSigVersion"] = df["AvSigVersion"].apply(lambda x: float((x.split(".")[1]) + "." + (x.split(".")[2]))).astype("float32")

        return df

    def hggdec_cnt(self, df):
        """
        CountryIdentifier
        """
        target_countries = [104, 95, 214, 89, 94, 59, 21, 100, 85, 195, 159, 57, 155, 188, 33, 44, 18, 88, 81, 205, 141]
        df["CountryIdentifier"] = df["CountryIdentifier"].isin(target_countries)
        return df

    def batteryGroup(self, df):
        """
        Census_InternalBatteryType
        """
        def group_battery(x):
            x = str(x).lower()
            if "li" in x:
                return 1
            else:
                return 0

        df["Census_InternalBatteryType"] = df["Census_InternalBatteryType"].apply(group_battery)
        return df
