from features.base_feature import BaseFeature
from pathlib import Path
import numpy as np
import pandas as pd
import datetime


class Kernel01(BaseFeature):
    """
    [ref]
    https://www.kaggle.com/adityaecdrid/simple-feature-engineering-xd
    """

    def get_loadcols(self):
        cols = ["AppVersion", "EngineVersion",
                "AvSigVersion",
                "OsBuildLab",
                "AVProductsEnabled",
                "AVProductStatesIdentifier",
                "AVProductsInstalled",
                "SmartScreen",
                "Census_SystemVolumeTotalCapacity",
                "Census_PrimaryDiskTotalCapacity",
                "Census_InternalPrimaryDisplayResolutionHorizontal",
                "Census_InternalPrimaryDisplayResolutionVertical",
                "Census_TotalPhysicalRAM",
                "Census_ProcessorCoreCount",
                "CountryIdentifier",
                "Census_InternalBatteryType",
                "Census_GenuineStateName"
                ]
        return cols

    def extract(self):
        return super().extract()

    # No Encode
    def Week_from(self, df, year):
        """
        AvSigVersion
        """
        start_day = datetime.datetime(year, 1, 1)
        datedict = np.load(Path(__file__).absolute().parents[1] / "data" / "external" / "AvSigVersionTimestamps.npy")[()]
        datedict = {key: (datedict[key] - start_day).days // 7 for key in datedict.keys()}
        df["AvSigVersion"] = df["AvSigVersion"].map(datedict)
        df["AvSigVersion"] = df["AvSigVersion"].fillna(-1)
        return df

    def newSmartScreen(self, df):
        """
        SmartScreen
        """
        df["SmartScreen"] = df["SmartScreen"].str.lower()
        df["SmartScreen"].replace(
            {"promt": "prompt",
             "promprt": "prompt",
             "00000000": "0",
             "enabled": "on",
             "of": "off",
             "deny": "0",
             "requiredadmin": "requireadmin"}, inplace=True)
        return df[["MachineIdentifier", "SmartScreen"]]

    def sort_by_date(self, df):
        """
        AvSigVersion_sort_by_date
        """
        def my_key(item):
            return tuple(int(part) for part in item[0].replace("1.2&#x17;3.1144.0", "1.273.1144.0").split("."))

        datedict = np.load(Path(__file__).absolute().parents[1] / "data" / "external" / "AvSigVersionTimestamps.npy")[()]
        items = dict(sorted(datedict.items(), key=my_key))
        new_map, cnt = {}, 0
        for key in items.keys():
            new_map[key] = cnt
            cnt += 1

        df["AvSigVersion"] = df["AvSigVersion"].map(new_map)
        df["AvSigVersion"] = df["AvSigVersion"].fillna(-1)
        return df

    def sum(self, df):
        """
        AvSigVersion
        """
        df["AvSigVersion"] = df["AvSigVersion"].replace(r'[^\.|0-9]', '1.273.1826.0', regex=True)
        df["AvSigVersion"] = df["AvSigVersion"].apply(lambda x: float(str(x).split('.')[1]) + float(str(x).split('.')[2]))
        return df[["MachineIdentifier", "AvSigVersion"]]

    def no_av_at_risk(self, df):
        """
        AVProductsEnabled
        """
        df["AVProductsEnabled"] = (df["AVProductsEnabled"] == 0)
        return df[["MachineIdentifier", "AVProductsEnabled"]]

    def not_genuine_user(self, df):
        """
        Census_GenuineStateName
        """
        df["Census_GenuineStateName"] = (df["Census_GenuineStateName"] != "IS_GENUINE")
        return df[["MachineIdentifier", "Census_GenuineStateName"]]

    def hggdec_cnt(self, df):
        """
        Count
        ryIdentifier
        """
        target_countries = [104, 95, 214, 89, 94, 59, 21, 100, 85, 195, 159, 57, 155, 188, 33, 44, 18, 88, 81, 205, 141]
        df["CountryIdentifier"] = df["CountryIdentifier"].isin(target_countries)
        return df

    def batteryGroup(self, df):
        """
        Census_InternalBatteryType
        """
        def group_battery(x):
            x = str(x).lower()
            if "li" in x:
                return 1
            else:
                return 0

        df["Census_InternalBatteryType"] = df["Census_InternalBatteryType"].apply(group_battery)
        return df

    def magic4(self, df):
        """
        AVProductStatesIdentifier
        """
        train = self.load_train()[["MachineIdentifier", "AVProductStatesIdentifier"]]
        top_20 = train["AVProductStatesIdentifier"].value_counts(dropna=False, normalize=True).cumsum().index[:20]
        df["AVProductStatesIdentifier"] = df["AVProductStatesIdentifier"].isin(top_20)
        return df

    def oneLess(self, df):
        """
        AVProductsInstalled
        """
        df["AVProductsInstalled"] = df["AVProductsInstalled"] >= 1
        df["AVProductsInstalled"] = df["AVProductsInstalled"].fillna(False)
        return df

    # Need Encode
    def build(self, df):
        """
        AvSigVersion
        """
        df["AvSigVersion"] = df["AvSigVersion"].replace(r'[^\.|0-9]', '1.273.1826.0', regex=True)
        df["AvSigVersion"] = df["AvSigVersion"].apply(lambda x: x.split(".")[1])
        return df[["MachineIdentifier", "AvSigVersion"]]

    def minor(self, df):
        """
        AvSigVersion
        """
        df["AvSigVersion"] = df["AvSigVersion"].replace(r"[^\.|0-9]", "1.273.1826.0", regex=True)
        df["AvSigVersion"] = df["AvSigVersion"].apply(lambda x: x.split(".")[2])
        return df[["MachineIdentifier", "AvSigVersion"]]

    def minor_build(self, df):
        """
        AvSigVersion
        """
        df["AvSigVersion"] = df["AvSigVersion"].replace(r"[^\.|0-9]", "1.273.1826.0", regex=True)
        df["AvSigVersion"] = df["AvSigVersion"].apply(lambda x: float((x.split(".")[1]) + "." + (x.split(".")[2]))).astype("float32")
        return df[["MachineIdentifier", "AvSigVersion"]]

    def secondVersion(self, df):
        """
        EngineVersion
        """
        df["EngineVersion"] = df["EngineVersion"].apply(lambda x: x.split('.')[2]).astype("category")
        return df["MachineIdentifier", "EngineVersion"]

    def exact(self, df):
        """
        OsBuildLab
        """
        df["OsBuildLab"] = df["OsBuildLab"].fillna('17134.1.amd64fre.rs4_release.180410-1804')
        df["OsBuildLab"] = df["OsBuildLab"].apply(lambda x: str(x).split('.')[0] + '.' + str(x).split('.')[1]).astype("category")
        return df[["MachineIdentifier", "OsBuildLab"]]

    def subVersion(self, df, num):
        """
        AppVersion
        """
        df["AppVersion"] = df["AppVersion"].apply(lambda x: x.split('.')[num]).astype("category")
        return df[["MachineIdentifier", "AppVersion"]]

# ============= new feature ============= #
    def from_latest(self, df):
        """
        AvSigVersion
        """
        def my_key(item):
            return tuple(int(part) for part in item[0].replace("1.2&#x17;3.1144.0", "1.273.1144.0").split("."))

        datedict = np.load(Path(__file__).absolute().parents[1] / "data" / "external" / "AvSigVersionTimestamps.npy")[()]
        items = dict(sorted(datedict.items(), key=my_key))

        part_key = df["AvSigVersion"].unique()
        new_map, cnt = {}, 0
        for key in items.keys():
            if key in part_key:
                new_map[key] = cnt
                cnt += 1

        df["AvSigVersion"] = df["AvSigVersion"].map(new_map)
        return df[["MachineIdentifier", "AvSigVersion"]]

    def mul_version(self, df, first=0, second=1):
        """
        AppVersion
        """
        df["AppVersion"] = df["AppVersion"].astype(str).apply(lambda s: int(s.split(".")[first]) * 100 + int(s.split(".")[second]))
        return df[["MachineIdentifier", "AppVersion"]]

    def is_converted_with_SmartScreen(self, df):
        """
        SmartScreen
        """
        major_list = ["RequireAdmin", "Prompt", "nan", "on", "off",
                      "ExistsNotSet", "Warn", "Block", "&#x02", "&#x01",
                      "0", "&#x01"]
        df["SmartScreen"].fillna("nan", inplace=True)
        df["SmartScreenIsConverted"] = df["SmartScreen"].isin(major_list)
        return df[["MachineIdentifier", "SmartScreenIsConverted"]]

    def heuristicEncoding(self, df):
        """
        SmartScreen
        """
        def reformat(se):
            se = se.str.lower()
            se.replace(
                {"promt": "prompt",
                 "promprt": "prompt",
                 "00000000": "0",
                 "enabled": "on",
                 "of": "off",
                 "deny": "0",
                 "requiredadmin": "requireadmin"}, inplace=True)
            return se

        df["SmartScreen"] = reformat(df["SmartScreen"].astype(str))
        df["SmartScreen"].fillna("nan", inplace=True)
        df = df.assign(SSClass=0.5)

        df.loc[df["SmartScreen"].isin(["requireadmin", "&#x03", "prompt"]), "SSClass"] = 1.0
        df.loc[df["SmartScreen"].isin(["existsnotset"]), "SSClass"] = 0.8
        df.loc[df["SmartScreen"].isin(["0"]), "SSClass"] = 0.65
        df.loc[df["SmartScreen"].isin(["off", "&#x01"]), "SSClass"] = 0.6
        df.loc[df["SmartScreen"].isin(["warn"]), "SSClass"] = 0.58
        df.loc[df["SmartScreen"].isin(["&#x02", "nan"]), "SSClass"] = 0.5
        df.loc[df["SmartScreen"].isin(["on"]), "SSClass"] = 0
        return df[["MachineIdentifier", "SmartScreen"]]
