from features.base_feature import BaseFeature
from pathlib import Path
import numpy as np
import pandas as pd
import dask.dataframe as dd
import datetime
from exceptions import IrregularExtractArgumentException
from features.get_dtype import get_csv_dtype


class TimeSeries(BaseFeature):
    """
    [ref]
    """

    def get_loadcols(self):
        cols = [
            "AvSigVersion",
            "OsBuildLab",
            "Census_OSVersion"
        ]
        return cols

    def extract(self):
        return super().extract()

    def timeDiff(self, df):
        """
        OsBuildLab

        OsBuildLab から AvSigVersion
        """

        full_df = self.load_full()
        datedict_avsig = np.load(Path(__file__).absolute().parents[1] / "data" / "external" / "AvSigVersionTimestamps.npy")[()]
        full_df["AvSigVersion"] = full_df["AvSigVersion"].map(datedict_avsig)
        full_df["OsBuildLab"] = full_df["OsBuildLab"].apply(lambda d: datetime.datetime(int("20" + d[-11:-9]), int(d[-9:-7]), int(d[-7:-5])))

        full_df["diff"] = (full_df["AvSigVersion"] - full_df["OsBuildLab"]).dt.days.astype(int)

        M_id = df["MachineIdentifier"].values.tolist()
        back_df = full_df[full_df["MachineIdentifier"].isin(M_id)]

        return back_df[["MachineIdentifier", "diff"]]
