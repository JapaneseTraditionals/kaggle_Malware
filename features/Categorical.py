from features.base_feature import BaseFeature
import pandas as pd
import dask.dataframe as dd
from features.get_dtype import get_csv_dtype
import time


class Categorical(BaseFeature):

    def get_loadcols(self):
        cols = [
            "ProductName",
            "EngineVersion",
            "AppVersion",
            "AvSigVersion",
            "RtpStateBitfield",
            "DefaultBrowsersIdentifier",
            "AVProductStatesIdentifier",
            "AVProductsInstalled",
            "AVProductsEnabled",
            "CountryIdentifier",
            "CityIdentifier",
            "OrganizationIdentifier",
            "GeoNameIdentifier",
            "LocaleEnglishNameIdentifier",
            "Platform",
            "Processor",
            "OsVer",
            "OsBuild",
            "OsSuite",
            "OsPlatformSubRelease",
            "OsBuildLab",
            "SkuEdition",
            "PuaMode",
            "IeVerIdentifier",
            "SmartScreen",
            "UacLuaenable",
            "Census_MDC2FormFactor",
            "Census_DeviceFamily",
            "Census_OEMNameIdentifier",
            "Census_OEMModelIdentifier",
            "Census_ProcessorManufacturerIdentifier",
            "Census_ProcessorModelIdentifier",
            "Census_ProcessorClass",
            "Census_PrimaryDiskTypeName",
            "Census_ChassisTypeName",
            "Census_PowerPlatformRoleName",
            "Census_InternalBatteryType",
            "Census_OSVersion",
            "Census_OSArchitecture",
            "Census_OSBranch",
            "Census_OSBuildNumber",
            "Census_OSBuildRevision",
            "Census_OSEdition",
            "Census_OSSkuName",
            "Census_OSInstallTypeName",
            "Census_OSInstallLanguageIdentifier",
            "Census_OSUILocaleIdentifier",
            "Census_OSWUAutoUpdateOptionsName",
            "Census_GenuineStateName",
            "Census_ActivationChannel",
            "Census_FlightRing",
            "Census_ThresholdOptIn",
            "Census_FirmwareManufacturerIdentifier",
            "Census_FirmwareVersionIdentifier",
            "Wdft_RegionIdentifier"
        ]
        return cols

    def extract(self):
        return super().extract()

    def plain(self, df):
        return df

    def LabelEncoding(self, df):
        cols = df.columns.tolist()

        full_df = None
        for part in ["train", "validate", "test"]:
            if part == "test":
                part_path = self.dataset_path / "test.csv"
            else:
                part_path = self.dataset_path / self.valid_dir / "{}.csv".format(part)
            another_df = pd.read_csv(part_path,
                                     dtype=get_csv_dtype(),
                                     usecols=cols)
            full_df = another_df if full_df is None else pd.concat([full_df, another_df])
        full_df.sort_values("MachineIdentifier", inplace=True)
        labels, uniques = pd.factorize(full_df[cols[1]])
        full_df[cols[1]] = labels

        M_id = df["MachineIdentifier"].values.tolist()
        back_df = full_df[full_df["MachineIdentifier"].isin(M_id)]
        return back_df

    def CountEncoding(self, df):
        feature_col = df.columns.tolist()[1]

        value_counts = dd.read_csv(self.input_path.parent / "train.csv",
                                   dtype=get_csv_dtype(),
                                   usecols=[feature_col]
                                   ).value_counts().compute()

        df = df[feature_col].map(value_counts.to_dict()).fillna(1)
        return df

    def RankEncoding(self, df):
        pass

    def FactorizeEncoding(self, df):
        pass

    def FrequencyEncoding(self, df):
        pass

    def TargetEncoding(self, df):
        pass

    def PopularEncoding(self, df):
        pass
