from features.base_feature import BaseFeature


class Categorical(BaseFeature):

    def get_loadcols(self):
        cols = [
            "ProductName",
            "EngineVersion",
            "AppVersion",
            "AvSigVersion",
            "RtpStateBitfield",
            "DefaultBrowsersIdentifier",
            "AVProductStatesIdentifier",
            "AVProductsInstalled",
            "AVProductsEnabled",
            "CountryIdentifier",
            "CityIdentifier",
            "OrganizationIdentifier",
            "GeoNameIdentifier",
            "LocaleEnglishNameIdentifier",
            "Platform",
            "Processor",
            "OsVer",
            "OsBuild",
            "OsSuite",
            "OsPlatformSubRelease",
            "OsBuildLab",
            "SkuEdition",
            "PuaMode",
            "IeVerIdentifier",
            "SmartScreen",
            "UacLuaenable",
            "Census_MDC2FormFactor",
            "Census_DeviceFamily",
            "Census_OEMNameIdentifier",
            "Census_OEMModelIdentifier",
            "Census_ProcessorManufacturerIdentifier",
            "Census_ProcessorModelIdentifier",
            "Census_ProcessorClass",
            "Census_PrimaryDiskTypeName",
            "Census_ChassisTypeName",
            "Census_PowerPlatformRoleName",
            "Census_InternalBatteryType",
            "Census_OSVersion",
            "Census_OSArchitecture",
            "Census_OSBranch",
            "Census_OSBuildNumber",
            "Census_OSBuildRevision",
            "Census_OSEdition",
            "Census_OSSkuName",
            "Census_OSInstallTypeName",
            "Census_OSInstallLanguageIdentifier",
            "Census_OSUILocaleIdentifier",
            "Census_OSWUAutoUpdateOptionsName",
            "Census_GenuineStateName",
            "Census_ActivationChannel",
            "Census_FlightRing",
            "Census_ThresholdOptIn",
            "Census_FirmwareManufacturerIdentifier",
            "Census_FirmwareVersionIdentifier",
            "Wdft_RegionIdentifier"
        ]
        return cols

    def extract(self):
        return super().extract()

    def plain(self, df):
        return df
