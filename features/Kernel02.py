from features.base_feature import BaseFeature
from pathlib import Path
import numpy as np


class Kernel02(BaseFeature):
    """
    [ref]
    https://www.kaggle.com/cdeotte/malware-timestamps-2
    """

    def get_loadcols(self):
        cols = [
            "AvSigVersion",
            "Census_OSVersion",
            "Census_PowerPlatformRoleName"
        ]
        return cols

    def extract(self):
        return super().extract()

    def sort_by_version(self, df):
        """
        Census_OSVersion
        """
        def my_key(item):
            return tuple(int(part) for part in item[0].split("."))

        datedict = np.load(Path(__file__).absolute().parents[1] / "data" / "external" / "OSVersionTimestamps.npy")[()]
        items = dict(sorted(datedict.items(), key=my_key))

        data_val = df["Census_OSVersion"].unique()

        new_map, cnt = {}, 0
        for key in items.keys():
            new_map[key] = cnt
            if key in data_val:
                cnt += 1

        df["Census_OSVersion"] = df["Census_OSVersion"].map(new_map)
        return df[["MachineIdentifier", "Census_OSVersion"]]

    def platformRole(self, df):
        """
        Census_PowerPlatformRoleName
        """
        df["Census_PowerPlatformRoleName"].replace({
            "AppliancePC": "Desktop",
            "EnterpriseServer": "Server",
            "PerformanceServer": "Server",
            "SOHOServer": "Server",
            "Slate": "Server",
            "Workstation": "Server",
            "UNKNOWN": "Others",
            "Unspecified": "Others"
        }, inplace=True)
        df["Census_PowerPlatformRoleName"].fillna("Others", inplace=True)
        return df[["MachineIdentifier", "Census_PowerPlatformRoleName"]]
